
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>


&lt {
    tapping-term-ms = <200>;

};
&mt {
   tapping-term-ms = <300>;
};


/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"



dash_plus: dash_plus {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp MINUS>, <&kp PLUS>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
 comma_q: comma_q {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp COMMA>, <&kp QUESTION>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

dot_under: dot_under {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp DOT>, <&kp UNDER>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
del_gt: del_gt {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp DELETE>, <&kp GREATER_THAN>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
 rpar_pipe: rpar_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
 lpar_caps: lpar_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp CAPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
dash_gt: dash_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
 semi_bslash: semi_bslash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp BACKSLASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

equal_colon: equal_colon {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp EQUAL>, <&kp COLON>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };

esc_lt: esc_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&kp LESS_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
ctrl_: ctrl_ {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mt LCTRL CAPSLOCK>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
 hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
     tilde_grave: tilde_grave {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp TILDE>, <&kp GRAVE>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
                };
    plus_q: plus_q {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp PLUS>, <&kp QUESTION>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            comma_pipe:  comma_pipe {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&kp PIPE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                    };

lpar_lbrace: lpar_lbrace {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LPAR>, <&kp LEFT_BRACE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
rpar_rbrace: rpar_rbrace {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RPAR>, <&kp RIGHT_BRACE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
capsword_gt: capsword_gt {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&caps_word>, <&kp GREATER_THAN>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
equal_grave: equal_grave {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp EQUAL>, <&kp GRAVE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ref_run: ref_run {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(LA(L))>, <&kp LC(LS(F10))>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
term_sidebar: term_sidebar {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LA(F12)>, <&kp LA(N1)>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
rpar_tilde: rpar_tilde{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RPAR>, <&kp TILDE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
equal_capsword: equal_capsword{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp EQUAL>, <&caps_word>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
equal_tilde: equal_tilde{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp EQUAL>, <&kp TILDE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
comma_grave:  comma_grave{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp COMMA>, <&kp GRAVE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
fontin_zoomin: fontin_zoomin {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(LA(GREATER_THAN))>, <&kp LS(LA(PLUS))>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
fontout_zoomout: fontout_zoomout {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(LA(LESS_THAN))>, <&kp LS(LA(MINUS))>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
enter_gt: enter_gt {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp LS(ENTER)>, <&kp GREATER_THAN>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            colon_gt: colon_gt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp COLON>, <&kp GREATER_THAN>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                    };
                     semi_grave: semi_grave {
                                     compatible = "zmk,behavior-mod-morph";
                                     #binding-cells = <0>;
                                     bindings = <&kp SEMI>, <&kp GRAVE>;
                                      mods = <(MOD_LSFT|MOD_RSFT)>;
                                 };
                                 caps_tilde: caps_tilde {
                                                 compatible = "zmk,behavior-mod-morph";
                                                 #binding-cells = <0>;
                                                 bindings = <&caps_word>, <&kp TILDE>;
                                                 mods = <(MOD_LSFT|MOD_RSFT)>;
                                             };
                                              semi_gt: semi_gt {
                                                         compatible = "zmk,behavior-mod-morph";
                                                         #binding-cells = <0>;
                                                         bindings = <&kp SEMI>, <&kp GREATER_THAN>;
                                                         mods = <(MOD_LSFT|MOD_RSFT)>;
                                                     };
                                                     comma_colon: comma_colon {
                                                                     compatible = "zmk,behavior-mod-morph";
                                                                     #binding-cells = <0>;
                                                                     bindings = <&kp COMMA>, <&kp COLON>;
                                                                     mods = <(MOD_LSFT|MOD_RSFT)>;
                                                                 };
                                                                 comma_tilde: comma_tilde {
                                                                             compatible = "zmk,behavior-mod-morph";
                                                                             #binding-cells = <0>;
                                                                             bindings = <&kp COMMA>, <&kp TILDE>;
                                                                             mods = <(MOD_LSFT|MOD_RSFT)>;
                                                                         };
                                                                         comma_caps: comma_caps {
                                                                                     compatible = "zmk,behavior-mod-morph";
                                                                                     #binding-cells = <0>;
                                                                                     bindings = <&kp COMMA>, <&caps_word>;
                                                                                     mods = <(MOD_LSFT|MOD_RSFT)>;
                                                                                 };
                                                                                 rpar_rbrack: rpar_rbrack {
                                                                                                 compatible = "zmk,behavior-mod-morph";
                                                                                                 #binding-cells = <0>;
                                                                                                 bindings = <&kp RPAR>, <&kp RIGHT_BRACKET>;
                                                                                                 mods = <(MOD_LSFT|MOD_RSFT)>;
                                                                                             };
                                                                                             lpar_lbrack: lpar_lbrack {
                                                                                                             compatible = "zmk,behavior-mod-morph";
                                                                                                             #binding-cells = <0>;
                                                                                                             bindings = <&kp LPAR>, <&kp LEFT_BRACKET>;
                                                                                                             mods = <(MOD_LSFT|MOD_RSFT)>;
                                                                                                         };

};

keymap {
compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp LS(LESS_THAN)     &kp LC(MINUS)    &kp LEFT_BRACE     &esc_lt     &lpar_lbrack  &fontout_zoomout              &none             &mo 3  &fontin_zoomin  &rpar_rbrack &semi_gt &kp RIGHT_BRACE            &kp LC(PLUS)  &kp LS(GREATER_THAN)
   &kp BLACKSLASH      &kp Q     &kp W     &kp E      &kp R   &kp T               &bootloader                                                                &none   &kp Y   &kp I      &kp O     &kp P     &kp J &kp SLASH
   &mt LSHFT ENTER      &kp A     &kp S     &kp D      &lt 3 F   &kp G               &none  &none  &kp LC(LA(ESC))                &kp RC(RA(DELETE))  &none  &none   &kp H   &kp U      &kp L     &kp K  &equal_colon    &mt RSHFT ENTER
 &none &kp Z     &kp X     &kp V      &kp C   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp M  &dot_under   &comma_caps         &dash_plus  &none
     &kp LGUI  &none  &kp LA(ENTER)  &term_sidebar  &kp TAB                    &lt 2 SPACE    &mt LCTRL GRAVE   &kp END                  &kp PG_DN  &kp SINGLE_QUOTE  &kp BSPC          &kp DELETE   &ref_run  &kp LS(F6)         &none      &kp RGUI
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        3 {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans             &none                                                   &none  &trans  &kp N1  &kp N2  &kp N3   &trans   &trans
 &trans  &trans  &kp LC(SLASH)  &kp LC(Z)  &kp LS(LC(Z))  &trans             &none  &trans  &trans                  &trans  &trans   &none  &trans  &kp N4  &kp N5   &kp N6   &trans   &kp ENTER
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &kp N7  &kp N8   &kp N9   &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &kp N0          &trans  &trans   &trans   &trans   &trans
            >;
        };
      4 {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none  &trans  &trans  &kp UP  &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans                  &trans  &trans   &none  &trans  &kp LEFT  &kp DOWN  &kp RIGHT   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans   &trans  &trans   &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };
         5 {
                    bindings = <
         &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &tog 1                                                   &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
         &trans  &trans  &trans  &trans  &trans  &trans             &none                                                   &none  &trans  &trans  &kp LA(UP)  &trans   &trans   &trans
         &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans                  &trans  &trans   &none  &trans  &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(RIGHT)   &trans   &trans
         &trans  &trans  &trans  &trans  &trans  &trans                            &trans                  &trans                  &trans  &trans  &trans   &trans  &trans   &trans
         &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans   &trans   &trans   &trans
                    >;
                };
        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

    };
};
